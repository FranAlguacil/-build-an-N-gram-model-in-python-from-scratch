def ngrams(sentences, n):
  
    # let's create a list to save
    ngrams = []
    
    # Iteration
    for sentence in sentences:
    
        # Generate the n-grams for the current sentence
        for i in range(len(sentence) - n + 1):
            ngram = sentence[i:i+n]
            ngrams.append(ngram)
   
    return ngrams



# This fuction is to generate as much n-grams as you can

sentences = preprocess_corpus('name of the corpus')
ngrams = []
for i in range(1, 6):
    ngrams.extend(generate_ngrams(sentences, i))



25/04/2023 UPDATED!!
    def train(self, sentences):
        for sent in sentences:
            padded_sent = ['<s>'] * self.n + sent + ['</s>']
            for i in range(self.n, len(padded_sent)):
                ngram = tuple(padded_sent[i - self.n:i])
                context = tuple(padded_sent[i - self.n:i - 1])
                self.vocab.add(padded_sent[i])
                if ngram in self.ngram_counts:
                    self.ngram_counts[ngram] += 1
                else:
                    self.ngram_counts[ngram] = 1
                if context in self.context_counts:
                    self.context_counts[context] += 1
                else:
                    self.context_counts[context] = 1

